# Report Terzo Incontro Haskell Ita (2016-03-26) a Campi Bisanzio (Calenzano (Firenze))

Partecipanti (18 persone):

* Alberto
* Emanuele
* Ruggero
* Titto
* Francesco Aaris
* Matteo Baglini
* Luca Benci
* Nicola Bonelli
* Daniele D'Orazio
* Francesco Gazzetta
* Luca Molteni
* Carlo Nucera
* Aurelièn Rainnone
* Nadir Sampaoli
* Marco Santamaria
* Salvatore Veneziano
* Vitallij Z.
* Massimo Zaniboni

Si parte alle 10:00, la sede di Develer è pronta a ospitare la crème della programmazione funzionale italiana, ben diciassette programmatori decisi a scrivere codice Haskell di ottima fattura e condividere tra di loro le loro esperienze con i linguaggi di programmazione funzionale puri.

Dopo un breve sondaggio sulla preparazione tecnica dei partecipanti, autovalutati con una scala da uno a cinque (dopodiché normalizzata da due a quattro per assenza di estremi) vengono proposti i seguenti progetti:

* Twitter di Titto
* Analisi sull'articolo di Renzo Carbonara su opaleye-sot
* Contribuire a stack
* Kata di Base
* HRobots

Si decide di approfondire solo i primi quattro progetti e ci si divide in tre gruppi diversi.

# Twitter di Titto (mentore: Titto)

Questo è certamente stato il progetto più popolare, con nove persone che ci hanno lavorato sopra.

Sono stati scritti quattro bot che si sono interfacciati con l'infrastruttura di Titto, ad esempio alcuni chiamavano Hoogle per fare ricerche su funzioni Haskell.
Il bello è stato che, grazie all'ottimo tutoraggio di Titto, anche le persone che non avevano un'ampia conoscenza di Haskell sono riusciti a creare qualcosa.

# Opaleye-sot (mentore: Ruggero)

L'articolo è molto interessante ed è stato analizzato fino alla fine.

È stata un'ottima occasione per imparare estensioni nuove di GHC e il loro utilizzo pratico.
Applicare i tipi Haskell a SQL è un'idea vincente.

# Contribuiamo su Stack (mentore: Luca Molteni)

In quattro partiamo subito a cercare di risolvere questa semplice issue:

* https://github.com/commercialhaskell/stack/issues/1369

Riuscendo brillantemente a creare una implementazione parziale per le 13:00. Dopo pranzo creiamo la pull request e ci rendiamo conto che abbiamo rotto il comportamento precedente, lavoriamo tutto il pomeriggio sul cercare di esprimere in maniera corretta l'opzione da console con un valore di default ma non ci riusciamo causa crisi da carboidrato.

Cosa abbiamo imparato:

* I tempi di compilazione di Haskell sono veramente lunghi soprattutto con progetti di queste dimensioni
* Anche in Haskell si possono fare porcate, come ad esempio dover modificare tre file e cinque posti diversi per aggiungere una opzione da command line.

# Lens (mentore: Carlo)

Carlo ha mostrato un'anteprima dei suoi articoli su lens che saranno pubblicati sul blog di Haskell.ITA in italiano.
